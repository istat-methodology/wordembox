# Spring properties
spring:
  application:
     name: graphservice  # Service registers under this name
  jmx:
    default-domain: graphservice
  freemarker:
    enabled: false           # Ignore Eureka dashboard FreeMarker templates
  thymeleaf:
    cache: false             # Allow Thymeleaf templates to be reloaded at runtime
    prefix: classpath:/templates/    # Trailing / mandatory
                             # Template location for this application only
  datasource:
    url:  jdbc:oracle:thin:@CROAZIA1.istat.it:1521:CRO1C
    username:  svil_mecbox
    password:  svilmecbox
    testWhileIdle : true
    validationQuery : SELECT 1 FROM DUAL
    tomcat:
      max-active: 1
      initial-size: 1
      max-idle: 1
      min-idle: 1
   

endpoints: 
  jmx:
    domain: graphservice
    unique-names: true

  
    

# Map the error path to error template (for Thymeleaf)
error:
  path: /error

# HTTP Server
server:
  port: 8080   # HTTP (Tomcat) port
  context-path: /graphservice

# Discovery Server Access
#  1. DEV ONLY: Reduce the lease renewal interval to speed up registration
#  2. Define URL of registration server (defaultZone)
eureka:
  client:
    serviceUrl:
      defaultZone: http://mec-svil:8080/mecregisterservice/eureka/
    registerWithEureka: false
    fetchRegistry: false
    
  instance:
    leaseRenewalIntervalInSeconds: 5   # DO NOT DO THIS IN PRODUCTION
    statusPageUrlPath: /graphservice/info
    homePageUrlPath: /graphservice/
    healthCheckUrlPath: /graphservice/health
    
 

#  3. If using the Angel release-train ONLY, give the process a unique instance id 
#     so that multiple instances can register when running on SAME host.  This is
#     not needed since release-train Brixton.
#     NOTE-1: spring.application.instance_id is only set when run on Cloud Foundry,
#             so we fallback on the server-port when it is not defined
#     NOTE-2: Syntax ${x:${y}} = use $x if set, otherwise use $y
#   metadataMap:
#     instanceId: ${spring.application.name}:${spring.application.instance_id:${server.port}}
      



